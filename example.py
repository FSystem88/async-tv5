#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ AsyncTV5
"""

import asyncio
import os
from async_tv5 import AsyncTV5, VideoNotFoundError

async def main(query: str):
	"""–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ AsyncTV5."""
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
	async with AsyncTV5() as client:
		try:
			print(f"{'='*60}")
			print(f"üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ AsyncTV5")
			print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
			print(f"{'='*60}")
			
			# 1. –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
			print(f"\n1Ô∏è‚É£ üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
			results = await client.search(query)
			
			if not results:
				print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
				return
			
			print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
			for i, result in enumerate(results, 1):
				print(f"   {i}. {result.name} (ID: {result.player_id})")
			
			# –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
			selected_result = results[0]
			player_id = selected_result.player_id
			
			print(f"\nüéØ –í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {selected_result.name}")
			print(f"   Player ID: {player_id}")
			
			# 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∞–ª–µ (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å query)
			print(f"\n2Ô∏è‚É£ üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∞–ª–µ...")
			tv_show = await client.get_tv_show(query=query, player_id=player_id)
			print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {tv_show.name}")
			print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tv_show.description[:150]}...")
			print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {tv_show.img}")
			
			# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–∞
			print(f"\n3Ô∏è‚É£ üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–∞...")
			series_data = await client.get_series_data(player_id)
			
			print(f"‚úÖ –í—Å–µ–≥–æ —Å–µ–∑–æ–Ω–æ–≤: {len(series_data.seasons)}")
			print("üéôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∑–≤—É—á–∫–∏:")
			for voice_id, voice_name in series_data.available_voices.items():
				print(f"   - {voice_name} (ID: {voice_id})")
			
			# 4. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ–∑–æ–Ω–∞–º
			print(f"\n4Ô∏è‚É£ üéûÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ–∑–æ–Ω–∞–º:")
			for season_num, season_info in series_data.seasons.items():
				unique_episodes = len(set(ep.episode for ep in season_info.episodes))
				unique_voices = len(set(ep.voice_id for ep in season_info.episodes))
				
				print(f"\n   üì∫ –°–µ–∑–æ–Ω {season_num}:")
				print(f"      –≠–ø–∏–∑–æ–¥–æ–≤: {unique_episodes}")
				print(f"      –û–∑–≤—É—á–µ–∫: {unique_voices}")
				
				# –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 2 —ç–ø–∏–∑–æ–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
				print(f"      –ü—Ä–∏–º–µ—Ä—ã —ç–ø–∏–∑–æ–¥–æ–≤:")
				shown_episodes = set()
				for ep in season_info.episodes:
					if ep.episode not in shown_episodes and len(shown_episodes) < 2:
						shown_episodes.add(ep.episode)
						ep_voices = [e for e in season_info.episodes if e.episode == ep.episode]
						print(f"        - –≠–ø–∏–∑–æ–¥ {ep.episode}: {len(ep_voices)} –æ–∑–≤—É—á–µ–∫")
			
			# 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
			print(f"\n5Ô∏è‚É£ üé™ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞...")
			try:
				episode_data_list = await client.get_episode_data(player_id, "1", "1")
				print(f"‚úÖ –≠–ø–∏–∑–æ–¥ 1—áx1 –∏–º–µ–µ—Ç {len(episode_data_list)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–∑–≤—É—á–∫–∏:")
				
				for i, episode_data in enumerate(episode_data_list[:3], 1):  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 3
					print(f"   {i}. {episode_data.voice_name} (ID: {episode_data.voice_id})")
					print(f"      Video ID: {episode_data.video_id}")
					print(f"      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {episode_data.duration} —Å–µ–∫")
					
			except VideoNotFoundError:
				print("‚ùå –≠–ø–∏–∑–æ–¥ 1x1 –Ω–µ –Ω–∞–π–¥–µ–Ω")
				# –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–ø–∏–∑–æ–¥
				for season_num, season_info in series_data.seasons.items():
					if season_info.episodes:
						first_episode = season_info.episodes[0]
						print(f"üîÑ –ü—Ä–æ–±—É–µ–º —ç–ø–∏–∑–æ–¥ {season_num}x{first_episode.episode}...")
						try:
							episode_data_list = await client.get_episode_data(
								player_id, str(season_num), first_episode.episode
							)
							print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ø–∏–∑–æ–¥ {season_num}x{first_episode.episode}")
							break
						except VideoNotFoundError:
							continue
			
			# 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
			if episode_data_list:
				first_voice_id = episode_data_list[0].voice_id
				first_voice_name = episode_data_list[0].voice_name
				
				print(f"\n6Ô∏è‚É£ üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤...")
				print(f"   –û–∑–≤—É—á–∫–∞: {first_voice_name} (ID: {first_voice_id})")
				
				qualities = await client.get_available_qualities(
					player_id=player_id,
					season=episode_data_list[0].season,
					episode=episode_data_list[0].episode, 
					voice_id=episode_data_list[0].voice_id
				)
				
				print("   üìè –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:")
				for quality in qualities:
					print(f"      - {quality.quality}p")
				
				# 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º —ç–ø–∏–∑–æ–¥–µ
				print(f"\n7Ô∏è‚É£ ‚è≠Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º —ç–ø–∏–∑–æ–¥–µ...")
				next_ep = await client.get_next_episode(player_id, 1, 1)
				if next_ep.exists:
					print(f"   ‚úÖ –°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥: –°–µ–∑–æ–Ω {next_ep.season}, –≠–ø–∏–∑–æ–¥ {next_ep.episode}")
				else:
					print("   ‚èπÔ∏è –°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ø–∏–∑–æ–¥)")
				
				# 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
				print(f"\n8Ô∏è‚É£ üì• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
				if qualities:
					quality_to_download = str(qualities[0].quality)
					print(f"   üéØ –ì–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:")
					print(f"      - –ö–∞—á–µ—Å—Ç–≤–æ: {quality_to_download}p")
					print(f"      - –û–∑–≤—É—á–∫–∞: {first_voice_name}")
					print(f"      - –≠–ø–∏–∑–æ–¥: 1x1")
					
					print(f"   ‚¨áÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
					output_path = await client.download_video(
					    player_id=player_id,
					    season="1",
					    episode="1",
					    voice_id=first_voice_id, 
					    quality=quality_to_download,
					    output_dir="./downloads"
					)
					print(f"   ‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {output_path}")
				else:
					print("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
			
			# 9. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
			print(f"\n9Ô∏è‚É£ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–∏–∞–ª–∞:")
			total_episodes = 0
			total_voices = 0
			
			for season_num, season_info in series_data.seasons.items():
				episodes_in_season = len(set(ep.episode for ep in season_info.episodes))
				voices_in_season = len(season_info.episodes)
				total_episodes += episodes_in_season
				total_voices += voices_in_season
				print(f"   üì∫ –°–µ–∑–æ–Ω {season_num}: {episodes_in_season} —ç–ø–∏–∑–æ–¥–æ–≤, {voices_in_season} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–∑–≤—É—á–∫–∏")
			
			print(f"   üìä –ò—Ç–æ–≥–æ: {total_episodes} —ç–ø–∏–∑–æ–¥–æ–≤, {total_voices} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–∑–≤—É—á–∫–∏")
			
			print(f"\n{'='*60}")
			print(f"üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
			print(f"{'='*60}")
				
		except VideoNotFoundError as e:
			print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
		except Exception as e:
			print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":

	query = "–í–∞–Ω-–ø–∏—Å"
	print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
	asyncio.run(main(query))
	
